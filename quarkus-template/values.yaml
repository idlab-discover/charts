# Global config for various dependencies we use in our Quarkus based applications
# These global values are used only when the dependency is enabled in the application
# by setting the equivalent `.Values.<dependency>.enabled` to `true`

global:
  host: ""
  ingressRoutes:
    matchHost: false
    tlsEnabled: false
    proxy: "none"

  env: []

  applicationYaml: {}

  image:
    registry: "gitlab.ilabt.imec.be:4567/discover/packages"
    tag: ""
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  deploymentStrategy: {}
  livenessProbe: {}
  readinessProbe: {}

  quarkus:
    httpPort: 8080
    metricsPort: ""
    logging:
      level: INFO

  truststore: {}

  oidc:
    authServerUrl: ""
    clientId: ""
    clientSecret: ""
    realm: ""
    existingSecret: ""
    clientIdSecretKey: "client-id"
    clientSecretSecretKey: "client-secret"
    realmSecretKey: ""
    applicationYaml: {}
  keycloakAdmin:
    enabled: false
    serverUrl: ""
    username: ""
    password: ""
    realm: ""
    existingSecret: ""
    usernameSecretKey: ""
    passwordSecretKey: ""
  openfga:
    url: ""
    storeId: ""
    existingSecret: ""
    storeIdSecretKey: ""
    applicationYaml: {}
  minio:
    host: ""
    port: ""
    secure: true
    skipTlsVerify: true
    useTls: false
    accessKey: ""
    secretKey: ""
    existingSecret: ""
    accessKeySecretKey: ""
    secretKeySecretKey: ""
    applicationYaml: {}
  kafka:
    bootstrapServers: ""
    applicationYaml: {}
  clickhouse:
    host: ""
    port: ""
    applicationYaml: {}
  #  username: ""
  #  password: ""
  #  database: ""
  #  existingSecret: ""
  #  usernameSecretKey: ""
  #  passwordSecretKey: ""

# Dependency settings can be overridden from their global values.
# To override a value, uncomment the corresponding key and set the desired value.
oidc:
  enabled: false
  # authServerUrl: ""
  # clientId: ""
  # clientSecret: ""
  # realm: ""
  # existingSecret: ""
  # clientIdSecretKey: ""
  # clientSecretSecretKey: ""
  # realmSecretKey: ""
  # applicationYaml: {}

keycloakAdmin:
  enabled: false
  # serverUrl: ""
  # username: ""
  # password: ""
  # realm: ""
  # existingSecret: ""
  # usernameSecretKey: ""
  # passwordSecretKey: ""

minio:
  enabled: false
  # host: ""
  # port: ""
  # secure: true
  # skipTlsVerify: true
  # useTls: false
  # accessKey: ""
  # secretKey: ""
  # existingSecret: ""
  # accessKeySecretKey: ""
  # secretKeySecretKey: ""
  # applicationYaml: {}

kafka:
  enabled: false
  # bootstrapServers: ""
  # applicationYaml: {}

clickhouse:
  enabled: false
  # host: ""
  # port: ""
  # applicationYaml: {}

openfga:
  enabled: false
  # url: ""
  # storeId: ""
  # existingSecret: ""
  # storeIdSecretKey: ""
  # applicationYaml: {}

job:
  enabled: false
  backoffLimit: 5
  restartPolicy: "OnFailure"

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# Set chart image name and override global values
image:
  {}
  #  Defaults to chart name when not set
  # name: ""
  # Overrides the registry for the image.
  # registry: ""
  # This sets the pull policy for images.
  # pullPolicy: ""
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

quarkus:
  httpPort: 8080
  metricsPort: ""

# Additional application.properties entries to be added to the deployment
# Values are appended to the default application.properties
applicationProperties: ""

# Application.yaml entries to be added to the deployment
# The chart only uses a default application.properties file and config
# through environment variables.
# Make sure your application has the `quarkus-config-yaml` extension enabled if you want to use this.
# Relevant order of precedence (https://quarkus.io/guides/config-reference#configuration-sources):
# 1. environment variables
# 2. application.yaml (if using the `quarkus-config-yaml` extension)
# 3. application.properties
applicationYaml: {}

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

ingressRoutes:
  matchHost:
  enabled: false
  tlsEnabled: false
  routes: []
#  routes:
#    - match: "Host(`chart-example.local`)"
#      middlewares:
#        - name: StripPrefix

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
readinessProbe: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

deploymentStrategy: {}

# Additional environment variables to be set on the output Deployment definition.
env: []

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

